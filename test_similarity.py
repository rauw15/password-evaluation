#!/usr/bin/env python3
"""
Script de prueba para la detecci√≥n de similitudes en contrase√±as
"""

import requests
import json

BASE_URL = "http://localhost:5000"
ENDPOINT = f"{BASE_URL}/api/v1/password/evaluate"

def test_similarity():
    """Prueba la detecci√≥n de similitudes"""
    
    print("=" * 70)
    print("PRUEBAS DE DETECCI√ìN DE SIMILITUDES EN CONTRASE√ëAS")
    print("=" * 70)
    
    test_cases = [
        {
            "name": "Contrase√±a com√∫n exacta",
            "password": "password",
            "expected_similar": True
        },
        {
            "name": "Contrase√±a com√∫n con s√≠mbolo a√±adido",
            "password": "password!",
            "expected_similar": True
        },
        {
            "name": "Contrase√±a com√∫n con n√∫mero a√±adido",
            "password": "password123",
            "expected_similar": True
        },
        {
            "name": "Contrase√±a com√∫n con s√≠mbolo quitado",
            "password": "saoiens",  # Si "saoiens@" est√° en el CSV
            "expected_similar": True
        },
        {
            "name": "Contrase√±a com√∫n con @ a√±adido",
            "password": "saoiens@",
            "expected_similar": True
        },
        {
            "name": "Contrase√±a segura √∫nica",
            "password": "MiContrase√±aSegura2024!@#",
            "expected_similar": False
        },
        {
            "name": "123456 (muy com√∫n)",
            "password": "123456",
            "expected_similar": True
        },
        {
            "name": "123456 con s√≠mbolo",
            "password": "123456!",
            "expected_similar": True
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"   Contrase√±a: '{test_case['password']}'")
        
        try:
            response = requests.post(
                ENDPOINT,
                json={"password": test_case["password"]},
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                strength = data['strength_evaluation']
                
                print(f"   ‚úÖ Status: {response.status_code}")
                print(f"   Entrop√≠a: {data['entropy_bits']} bits")
                print(f"   Categor√≠a: {strength['strength_category']}")
                print(f"   Nivel seguridad: {strength['security_level']}")
                print(f"   Es com√∫n: {strength['is_common_password']}")
                print(f"   Es similar: {strength['is_similar_password']}")
                
                if strength['similar_passwords_found']:
                    print(f"   üîç Contrase√±as similares encontradas:")
                    for similar in strength['similar_passwords_found']:
                        print(f"      ‚Ä¢ '{similar}'")
                
                print(f"   Tiempo crackeo: {strength['time_to_crack']}")
                print(f"   Recomendaciones:")
                for rec in strength['recommendations'][:3]:
                    print(f"      ‚Ä¢ {rec}")
                    
            else:
                print(f"   ‚ùå Error - Status: {response.status_code}")
                print(f"   Respuesta: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
        except Exception as e:
            print(f"   ‚ùå Error inesperado: {e}")
    
    print("\n" + "=" * 70)
    print("PRUEBAS COMPLETADAS")
    print("=" * 70)

if __name__ == "__main__":
    print("Aseg√∫rate de que la API est√© ejecut√°ndose en http://localhost:5000")
    print("Presiona Enter para continuar o Ctrl+C para cancelar...")
    input()
    
    test_similarity()

